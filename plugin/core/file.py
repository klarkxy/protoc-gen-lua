#  FILE:  plugin/core/file.py
#  DESCRIPTION:  protoc-gen-lua
#      Google's Protocol Buffers project, ported to lua.
#      https://github.com/klarkxy/protoc-gen-lua/
#
#      Copyright (c) 2021 , Klarkxy 278370456@qq.com
#      All rights reserved.
#
#      Use, modification and distribution are subject to the "New BSD License"
#      as listed at <url: http://www.opensource.org/licenses/bsd-license.php >.
#
#  COMPANY:  BlackFox
#  CREATED:  2021-12-07 10:30:58 CST

import google.protobuf.descriptor_pb2 as descriptor_pb2
from .enum import *
from .message import *
from .writer import *

file_map = {}

class File:
    def __init__(self, file: descriptor_pb2.FileDescriptorProto) -> None:
        assert isinstance(file, descriptor_pb2.FileDescriptorProto)
        self.proto = file
        log(f"Declare File '{self.proto.name}'")
        file_map[self.proto.name] = self
        
        self.module_name = self.proto.name.split(".")[0] + "_pb"
        self.file_name = self.module_name + ".lua"
        self.proto_name = "." + self.proto.package
        self.lua_name = "_".join(self.module_name.split("/"))
        
        self.enums = []
        for enm in self.proto.enum_type:
            self.enums.append(Enum(self.proto, enm, self.proto_name, self.lua_name))
        self.messages = []
        for msg in self.proto.message_type:
            self.messages.append(Message(self.proto, msg, self.proto_name, self.lua_name))
    
    def set_protoc_version(self, version: str):
        self.protoc_version = version
        
    def set_proto_gen_lua_version(self, version: str):
        self.proto_gen_lua_version = version
        
    def generate(self, s : Writer):
        log(f"Generate File '{self.proto.name}'")
        s.p("-- This file is generated by proto-gen-lua. DO NOT EDIT.")
        if self.protoc_version:
            s.p(f"-- The protoc version is '{self.protoc_version}'")
        if self.proto_gen_lua_version:
            s.p(f"-- The proto-gen-lua version is '{self.proto_gen_lua_version}'")
        # 引用其他文件
        for depend in self.proto.dependency:
            module_name = ".".join(file_map[depend].module_name.split("/"))
            s.p(f"local {file_map[depend].lua_name} = require \"{module_name}\"")
        # 创建一个本地表
        s.p(f"local {self.lua_name} = {{}}")
        # 创建所有的enum
        for enm in self.enums:
            enm.generate(s)
        # 创建所有的message
        for msg in self.messages:
            msg.generate(s)
        # 生成Descriptor
        s.p("")
        s.p("----------------- Descriptor -----------------")
        s.p("")
        if self.lua_name != "google_protobuf_descriptor_pb":
            s.p(f"local google_protobuf_descriptor_pb = require \"google/protobuf/descriptor_pb\"")
        self.descripte(s)
        # 返回本地表
        s.p(f"return {self.lua_name}")
    
    def descripte(self, s : Writer):
        log(f"Descripte File '{self.proto.name}'")
        # 说明所有的enum
        for enm in self.enums:
            enm.descripte(s)
        # 说明所有的message
        for msg in self.messages:
            msg.descripte(s)
        # 说明本文件
        s.p(f"{self.lua_name}.Descriptor = {{")
        with s:
            s.p(f"name = \"{self.proto.name}\",")
            s.p(f"package = \"{self.proto.package}\",")
            if len(self.messages) > 0:
                s.p(f"message_type = {{")
                with s:
                    for msg in self.messages:
                        s.p(f"{msg.lua_name}.Descriptor,")
                s.p("},")    
            if len(self.enums) > 0:
                s.p(f"enum_type = {{")
                with s:
                    for enm in self.enums:
                        s.p(f"{enm.lua_name}.Descriptor,")
                s.p("},")
        s.p("}")