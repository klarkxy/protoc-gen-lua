-- This file is generated by protoc-gen-lua from '{{proto.name}}'. DO NOT EDIT!
-- The protoc's version is '{{protoc_version}}'.
-- The protoc-gen-lua's version is '{{protoc_gen_lua_version}}'.

local {{module_name}} = {}

{% macro gen_enums(enums, prefix=[]) %}
    {% for enum in enums %}
--- Enum '{{ prefix|join(".") }}.{{enum.name}}' ---
{{ prefix|join(".") }}.{{enum.name}} = {}
        {% for value in enum.value %}
{{ prefix|join(".") }}.{{value.name}} = {{value.number}}
        {% endfor %}
    {% endfor %}
{% endmacro %}
{% macro gen_messages(messages, prefix=[]) %}
    {% for message in messages recursive %}
        {% do prefix.append(message.name) %}
--- Message '{{ prefix|join(".") }}' ---
{{ prefix|join(".") }} = {}
        {# 先递归把内置message给建了 #}
        {% if message.nested_type.__len__() > 0 %}
            {{ loop(message.nested_type) }}
        {% endif %}
        {#- 构建内置enum -#}
        {% if message.enum_type.__len__() > 0 %}
            {{ gen_enums(message.enum_type) }}
        {% endif %}
{{ prefix|join(".") }}.__call = function ()
local meta = {}
meta.__newindex = function (self, key, value)
        {% for field in message.field %}
if key == {{ field.name }} then
rawset(self, key, value)
end
        {% endfor %}
error("{{ prefix|join(".") }} has no key '" .. key .. "'")
end
return setmetatable({}, meta)
end

        {% do prefix.pop(1) %}
    {% endfor %}
{% endmacro %}
------ Global Enum -----
{{ gen_enums(proto.enum_type, [module_name]) }}
------------------------

------ Global Message -----
{{ gen_messages(proto.message_type, [module_name]) }}
---------------------------

return {{module_name}}