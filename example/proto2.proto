syntax = "proto2";

package example.proto2;

/* SearchRequest represents a search query, with pagination options to
 * indicate which results to include in the response. */
message SearchRequest {
  required string query = 1;
  optional int32 page_number = 2; // Which page number do we want?
  // Number of results to return per page.
  optional int32 result_per_page = 3 [ default = 10 ];
  enum Corpus {
    UNIVERSAL = 0;
    WEB = 1;
    IMAGES = 2;
    LOCAL = 3;
    NEWS = 4;
    PRODUCTS = 5;
    VIDEO = 6;
  }
  optional Corpus corpus = 4 [ default = UNIVERSAL ];
}

message Foo {
  // ...
  extensions 100 to 199;
}
extend Foo {
  // ...
  optional int32 bar = 126;
}

message SearchResponse {
  repeated int32 samples = 4 [ packed = true ];

  message Result {
    required string url = 1;
    optional string title = 2;
    repeated string snippets = 3;
  }
  repeated Result result = 1;

  extend Foo {
    // ...
    optional int32 bar = 127;
  }

  map<string, SampleMessage> projects = 3;
  reserved 2, 15, 9 to 11;
  reserved "foo", "bar";
}
enum EnumAllowingAlias {
  option allow_alias = true;
  UNKNOWN = 0;
  STARTED = 1;
  RUNNING = 1;
  reserved 2, 15, 9 to 11, 40 to max;
  reserved "FOO", "BAR";
}
message SampleMessage {
  oneof test_oneof {
    string name = 4;
    int32 number = 9;
  }
}
service SearchService { rpc Search(SearchRequest) returns (SearchResponse); }

import "google/protobuf/descriptor.proto";

extend google.protobuf.FileOptions { optional string my_file_option = 50000; }
extend google.protobuf.MessageOptions {
  optional int32 my_message_option = 50001;
}
extend google.protobuf.FieldOptions { optional float my_field_option = 50002; }
extend google.protobuf.OneofOptions { optional int64 my_oneof_option = 50003; }
extend google.protobuf.EnumOptions { optional bool my_enum_option = 50004; }
extend google.protobuf.EnumValueOptions {
  optional uint32 my_enum_value_option = 50005;
}
extend google.protobuf.ServiceOptions {
  optional MyEnum my_service_option = 50006;
}
extend google.protobuf.MethodOptions {
  optional MyMessage my_method_option = 50007;
}

option (my_file_option) = "Hello world!";

message MyMessage {
  option (my_message_option) = 1234;

  optional int32 foo = 1 [ (my_field_option) = 4.5 ];
  optional string bar = 2;
  oneof qux {
    option (my_oneof_option) = 42;

    string quux = 3;
  }
}

enum MyEnum {
  option (my_enum_option) = true;

  FOO = 1 [ (my_enum_value_option) = 321 ];
  BAR = 2;
}

message RequestType {}
message ResponseType {}

service MyService {
  option (my_service_option) = FOO;

  rpc MyMethod(RequestType) returns (ResponseType) {
    // Note:  my_method_option has type MyMessage.  We can set each field
    //   within it using a separate "option" line.
    option (my_method_option).foo = 567;
    option (my_method_option).bar = "Some string";
  }
}

message FooOptions {
  optional int32 opt1 = 1;
  optional string opt2 = 2;
}

extend google.protobuf.FieldOptions { optional FooOptions foo_options = 1234; }

// usage:
message Bar {
  optional int32 a = 1 [ (foo_options).opt1 = 123, (foo_options).opt2 = "baz" ];
  // alternative aggregate syntax (uses TextFormat):
  optional int32 b = 2 [ (foo_options) = {opt1 : 123 opt2 : "baz"} ];
}